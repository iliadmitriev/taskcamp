apiVersion: v1
kind: Service
metadata:
  labels:
    # should match with labels of deployment and pods
    app: pg-postgres
    cluster-name: main
  name: postgres-taskcamp # .namespace.svc.cluster.local
spec:
  selector:
    # should match with labels of deployment and pods
    app: pg-postgres
    cluster-name: main
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
    - name: pgbouncer
      port: 6432
      targetPort: 6432
    - name: patroni
      port: 8008
      targetPort: 8008
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pg-postgres
    cluster-name: main
    role: master
  name: postgres-taskcamp-master
spec:
  selector:
    app: pg-postgres
    cluster-name: main
    role: master
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
    - name: pgbouncer
      port: 6432
      targetPort: 6432
    - name: patroni
      port: 8008
      targetPort: 8008
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-taskcamp # postgres-0.postgres-db.namespace.svc.cluster.local
spec:
  selector:
    matchLabels:
      app: pg-postgres
      cluster-name: main
  serviceName: pg-postgres # should match .metadata.name of headless service
  replicas: 3
  template:
    metadata:
      labels:
        app: pg-postgres
        cluster-name: main
    spec:
      securityContext:
        runAsUser: 70
        fsGroup: 70
        runAsGroup: 70
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      serviceAccountName: pg-service-account
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 5
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchLabels:
                    app: pg-postgres
      initContainers:
        - name: volume-mount-hack
          image: busybox
          command: ['sh', '-c', "chown -R 70:70 /data"]
          securityContext:
            runAsGroup: 0
            runAsUser: 0
            allowPrivilegeEscalation: false
          volumeMounts:
          - name: postgres-pvc
            mountPath: /data
      containers:
      - name: pg-postgres-pod
        imagePullPolicy: Always
        image: iliadmitriev/postgres-cluster
        resources:
          requests:
            cpu: 500m
            memory: 250Mi
          limits:
            cpu: 1000m
            memory: 500Mi
        securityContext:
          runAsUser: 70
          runAsGroup: 70
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - all
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /liveness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
          - name: pg
            containerPort: 5432
          - name: patroni
            containerPort: 8008
        env:
          - name: POSTGRES_USER
            value: "taskcamp"
          - name: POSTGRES_PASSWORD
            value: "secret"
          - name: POSTGRES_DB
            value: "taskcamp"
          - name: PATRONI_KUBERNETES_LABELS
            value: "{app: pg-postgres, cluster-name: main}"
          - name: PATRONI_SCOPE
            value: main
          - name: PATRONI_KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: PATRONI_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
            value: "$(POD_IP):5432"
          - name: PATRONI_RESTAPI_CONNECT_ADDRESS
            value: "$(POD_IP):8008"
          - name: PATRONI_POSTGRESQL_DATA_DIR
            value: /data/postgres/data
        volumeMounts:
        - name: postgres-pvc
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: postgres-pvc
      labels:
        app: pg-postgres
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pg-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pg-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pr-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pg-role
subjects:
- kind: ServiceAccount
  name: pg-service-account
